

package hypergraph;



import KNN.KNN_Init;
import KNN.LabelData;
import hga.Hungarian_GAProcess;
import hga.InserterStreamProcessor;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import queryoptimization_hga.MainFrame;
import queryoptimization_hga.QueryDataReader;





public class WithOptimizationFrame extends javax.swing.JFrame {
public String filename="";
    /** Creates new form MainFrame */
    public WithOptimizationFrame() {
        super("HDFS QUERY OPTIMIZATION FRAME");
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);
        jPanel1.add(jTextField1);
        jTextField1.setBounds(20, 30, 260, 30);

        jButton1.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(300, 30, 100, 30);

        jButton2.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        jButton2.setText("OK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(20, 100, 120, 27);

        jButton3.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        jButton3.setText("Clear");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);
        jButton3.setBounds(150, 100, 120, 27);

        jButton5.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        jButton5.setText("Back");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5);
        jButton5.setBounds(300, 100, 100, 30);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(100, 70, 460, 270);

        jLabel1.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        jLabel1.setText("HDFS Query Optimization");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(170, 30, 340, 29);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        JFileChooser fc=new JFileChooser();
        fc.showOpenDialog(fc);

        File src = fc.getSelectedFile();
        File  dirpath=fc.getCurrentDirectory();


        String filePath = src.getAbsolutePath();
        filename=src.getName();
        String dname=dirpath.getAbsolutePath();
        System.out.println("only file name is"+filename);
        System.out.println("only Directory  name is"+dname);
         System.out.println("Complete path is  is"+filePath);



        //  dfn=src.getName();

        jTextField1.setText(filePath);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        
        String path=jTextField1.getText();
        if(path.length()==0)
        {
            JOptionPane.showMessageDialog(null, "please select file");
        } 
        else

        {
            
            
            File folder=new File(GraphInit.DB_PATH);
            if(folder.exists())
            {
                
                JOptionPane.showMessageDialog(null,"Graph can not be created Successfully \n"
                        + "Please delete the previous graph Folder "); 
            }
            else
            {
          
                long start=System.currentTimeMillis();
   QueryDataReader qdr=new QueryDataReader();

     ArrayList   mas1=qdr.getFileData(path);
       ArrayList labeldata=new LabelData().getLablledData(mas1);
           
            System.out.println("\n\n LABELLED  DATA IS ");
        for(int i=0;i<labeldata.size();i++)
        {
            ArrayList tem=(ArrayList)labeldata.get(i);
            System.out.println(tem);
        }
        
        
      ArrayList clusters= new KNN_Init().initClustering(labeldata);
      
      
       System.out.println("=======K-cluster====");
       for(int i=0;i<clusters.size();i++)
       {
           ArrayList temp=(ArrayList)clusters.get(i);
           System.out.println("=======cluster======No========"+(i+1));
           System.out.println(temp);
       }
       System.out.println("==========================clsustering Process is been completed===========================\n\n");
    
     
         ArrayList mas=new ArrayList();
       
           for(int i=0;i<mas1.size();i++)
           {
               ArrayList temp=(ArrayList)mas1.get(i);
               String s1=(String)temp.get(1);
               String s2=(String)temp.get(11);
               String con=(String)temp.get(18);
               
               ArrayList temp1=new ArrayList();
               temp1.add(s1);
               temp1.add(s2);
               temp1.add(con);
               mas.add(temp1);
           }
     
     
     
     System.out.println("++++mas  genearted+++++");
     System.out.println(mas);
      
     DataKeeper.graphmas=mas;
     ArrayList from=new ArrayList();
     ArrayList to=new ArrayList();
      ArrayList master=new ArrayList();

  
     for(int i=0;i<mas.size();i++)
     {
         ArrayList mm=new ArrayList();
         ArrayList aa=(ArrayList) mas.get(i);
        // System.out.println("------------------->"+aa.size());

         String uid=(String)aa.get(0);
         String eyecolor=(String)aa.get(1);
         String bg=(String)aa.get(2);

         mm.add(eyecolor);
         mm.add(bg);
         mm.add(uid);
         master.add(mm);

        // System.out.println("\n");

        // System.out.println("----"+mm );
         if(!from.contains(eyecolor))
             from.add(eyecolor);
         if(!to.contains(bg))
             to.add(bg);

         
       

        
     }
     
                System.out.println("From is  "+from);
                System.out.println("To is  "+to);
                
     
      new Hungarian_GAProcess().init_HGA_Process(from.size());
     
     

     new InserterStreamProcessor().insertData(mas1);
     
     
                new GraphInit().initGraph();
                Neo4JDbInserter n1 = new Neo4JDbInserter();
                n1.createDb(master, from, to);
                n1.shutDown();
                long end = System.currentTimeMillis();
                long total = end - start;
                System.out.println("*************Total time is " + total);

   
    JOptionPane.showMessageDialog(null,mas1.size()+" Queries are Commited Succesfully in "+total+" Milliseconds");
            
      //   JOptionPane.showMessageDialog(null,"Graph is been Stored successfully ");
         
            }
         
        }
}//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        jTextField1.setText("");
}//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
      
          this.dispose();
         MainFrame mf=new MainFrame();
        mf.setVisible(true);
        mf.setLocation(400,150);
        mf.setSize(600,400);
}//GEN-LAST:event_jButton5ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WithOptimizationFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}
